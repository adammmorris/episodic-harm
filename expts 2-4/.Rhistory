nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(MASS)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(ez)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
200 * .7
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
rm(list=ls())
N <- 361 # sample size
J <- 7 # number of predictors
ss.reg <- 59.69 # sum of squares of regression model
ss.res <- 344.25 # sum of squares of residuals
ms.reg <- ss.reg / J # mean-square regression
ms.res <- ss.res / (N - J - 1) # mean-square residuals
## 3a.
# What % of the variation in opposition to affirmative action can be explained
# by the other variables?
# The % of variance explained by all of them is R-squared, which is
# SS-reg / (SS-reg + SS-res), or...
rsq <- ss.reg / (ss.reg + ss.res) # .15
# The % of variance that can be explained by each predictor (NOT controlling
# for other variables) is the square of the zero-order correlations, or...
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
# in the order on the homework:
# .055 .072 .0017 .0083 .019 .0059 .030
# The % of variance that can be explained by each predictor (controlling for the
# effects of the other predictors on this predictor) is the square of the semi-partial correlation
# between opposition to affirmative action and the predictor (available in the output), or..
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
# in the order on the homework:
# .032 .032 .00084 .015 .0078 .0012 .011
f.stat <- ms.reg / ms.res
# and get the p value by using the F distribution function...
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1) # .13
var.res <- ss.res / (N - J - 1) # .98
.0884 ^ 2 # .0078
b.educ <- .143 * 1.059 / 1.618
# then, calculate a t statistic by t(N - J - 1) = b / std-error(b), pulling std-error(b) from the
# output, or...
t.stat.educ <- b.educ / .038
# finally, get the (2-tailed) p value by looking up this value in the t distribution
2 * pt(t.stat.educ, N - J - 1, lower.tail = FALSE) # .014
# p < .05; opposition to affirmative action can be predicted by education at an above-chance level
## 3g.
# Same explanation as above.
b.sdo <- .115 * 1.059 / .114
# As it's not in the output, this time we need to calculate the standard error of the unstandarized
# coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate.sdo <- sqrt(ss.res / N) # .98
se.estimate.sdo <- sqrt(ss.res / N) # .98
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b.sdo <- sqrt((se.estimate.sdo ^ 2) / (ss.sdo * tol.sdo)) # .49
t.stat.sdo <- b.sdo / se.b.sdo # 2.18
2 * pt(t.stat.sdo, N - J - 1, lower.tail = FALSE) # .030
# p < .05; opposition to affirmative action can be predicted by SDO at an above-chance level
## 3h.
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# This semi-partial correlation is a measure of the relationship between affirmative action
# opposition and education, controlling for the effect of SDO on education. It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2) # .13
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
install.packages("BiasedUrn")
# only works in Rstudio -- otherwise you have to set the path manually!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
require(lme4)
require(lmerTest)
require(dplyr)
require(RColorBrewer)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1),
axis.title.y = element_text(vjust = 1))
ymin = 2
ymax = 6
se <- function(data) {return(sd(data)/sqrt(length(data)))}
dodge <- position_dodge(width=0.9)
getExcludeSubj = function(data, minRespLength, nResponses) {
return((data %>% group_by(subject) %>%
summarise(nResponses = length(response), respLength = mean(nchar(encodeString(as.character(na.omit(response)))))) %>%
filter(respLength < minRespLength | nResponses != nResponses))$subject)
}
# only works in Rstudio -- otherwise you have to set the path manually!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
require(lme4)
require(lmerTest)
require(dplyr)
require(RColorBrewer)
require(mediation)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1),
axis.title.y = element_text(vjust = 1))
se <- function(data) {return(sd(data)/sqrt(length(data)))}
dodge <- position_dodge(width=0.9)
getExcludeSubj = function(data, minRespLength, correctNumResp) {
return((data %>% group_by(subject) %>%
summarise(nResponses = length(response), respLength = mean(nchar(encodeString(as.character(na.omit(response)))))) %>%
filter(respLength < minRespLength | nResponses != correctNumResp))$subject)
}
studies = c('rhyme', 'rhyme_justifboth', 'read', 'scrambled')
# import data -------------------------------------------------------------
study = studies[1]
# import data -------------------------------------------------------------
study = studies[1]
data <- read.csv("data.csv") %>% arrange(subject) %>%
filter(version %in% study) %>%
mutate(imagine = factor(imagine, labels = c("Control", "Imagine"), levels = c(0,1)),
condition = factor(condition, labels = c("Positive","Neutral","Negative"), levels = c(2,1,0)),
rating_vivid = (rating_detail + rating_cohere) / 2)
data = data %>%
filter(!(subject %in% getExcludeSubj(data, 50,
ifelse(study == 'scrambled',
length(unique(story_id)) / 2,
length(unique(story_id))))))
if (study != 'rhyme') {
data = data %>% filter(condition != 'Neutral')
}
df.bysubj <- data %>% group_by(condition, imagine, subject) %>%
summarise(rating_will = mean(rating_will), rating_happy = mean(rating_happy),
rating_check = mean(rating_check), rating_justif = mean(rating_justif),
rating_vivid = mean(rating_vivid))
df.bycond <- df.bysubj %>% group_by(condition, imagine) %>%
summarise(will = mean(rating_will), will.se = se(rating_will),
happy = mean(rating_happy), happy.se = se(rating_happy),
check = mean(rating_check), check.se = se(rating_check),
justif = mean(rating_justif), justif.se = se(rating_justif),
vivid = mean(rating_vivid), vivid.se = se(rating_vivid))
# test for interaction
model <- lmer(rating_will ~ condition * imagine + (1 + imagine | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
model.noint <- lmer(rating_will ~ condition + imagine + (1 + imagine | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
anova(model, model.noint)
load("/Users/adam/Me/Psychology/Projects/DYNA/git/data/help_vs_harm/analysis.RData")
anova(model, model.noint)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
require(ggplot2)
require(lme4)
require(lmerTest)
require(dplyr)
require(RColorBrewer)
require(mediation)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1),
axis.title.y = element_text(vjust = 1))
se <- function(data) {return(sd(data)/sqrt(length(data)))}
dodge <- position_dodge(width=0.9)
getExcludeSubj = function(data, minRespLength, correctNumResp) {
return((data %>% group_by(subject) %>%
summarise(nResponses = length(response), respLength = mean(nchar(encodeString(as.character(na.omit(response)))))) %>%
filter(respLength < minRespLength | nResponses != correctNumResp))$subject)
}
studies = c('rhyme', 'rhyme_justifboth', 'read', 'scrambled')
# import data -------------------------------------------------------------
study = studies[1]
data <- read.csv("data.csv") %>% arrange(subject) %>%
filter(version %in% study) %>%
mutate(imagine = factor(imagine, labels = c("Control", "Imagine"), levels = c(0,1)),
condition = factor(condition, labels = c("Positive","Neutral","Negative"), levels = c(2,1,0)),
rating_vivid = (rating_detail + rating_cohere) / 2)
data = data %>%
filter(!(subject %in% getExcludeSubj(data, 50,
ifelse(study == 'scrambled',
length(unique(story_id)) / 2,
length(unique(story_id))))))
if (study != 'rhyme') {
data = data %>% filter(condition != 'Neutral')
}
df.bysubj <- data %>% group_by(condition, imagine, subject) %>%
summarise(rating_will = mean(rating_will), rating_happy = mean(rating_happy),
rating_check = mean(rating_check), rating_justif = mean(rating_justif),
rating_vivid = mean(rating_vivid))
df.bycond <- df.bysubj %>% group_by(condition, imagine) %>%
summarise(will = mean(rating_will), will.se = se(rating_will),
happy = mean(rating_happy), happy.se = se(rating_happy),
check = mean(rating_check), check.se = se(rating_check),
justif = mean(rating_justif), justif.se = se(rating_justif),
vivid = mean(rating_vivid), vivid.se = se(rating_vivid))
# test for main effects
model.onlyimag <- lmer(rating_will ~ imagine + (1 + imagine | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
model.onlycond <- lmer(rating_will ~ condition + (1 + imagine | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
anova(model.noint, model.onlycond)
anova(model.noint, model.onlyimag)
model.noint <- lmer(rating_will ~ condition + imagine + (1 + imagine | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
anova(model.noint, model.onlycond)
anova(model.noint, model.onlyimag)
# test for simple effects
model.pos <- lmer(rating_will ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Positive'), REML = F)
model.pos.null <- lmer(rating_will ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Positive'), REML = F)
anova(model.pos, model.pos.null)
model.neg <- lmer(rating_happy ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
model.neg.null <- lmer(rating_happy ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
anova(model.neg, model.neg.null)
model.neg <- lmer(rating_happy ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
model.neg.null <- lmer(rating_happy ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
anova(model.neg, model.neg.null)
model.neut <- lmer(rating_happy ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Neutral'), REML = F)
model.neut.null <- lmer(rating_happy ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Neutral'), REML = F)
anova(model.neut, model.neut.null)
# test for simple effects
model.pos <- lmer(rating_happy ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Positive'), REML = F)
model.pos.null <- lmer(rating_happy ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Positive'), REML = F)
anova(model.pos, model.pos.null)
model.neut <- lmer(rating_will ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Neutral'), REML = F)
model.neut.null <- lmer(rating_will ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Neutral'), REML = F)
anova(model.neut, model.neut.null)
model.neg <- lmer(rating_will ~ imagine + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
model.neg.null <- lmer(rating_will ~ 1 + (1 + imagine | subject) + (1 + imagine | story_id), data = data %>% filter(condition == 'Negative'), REML = F)
anova(model.neg, model.neg.null)
model.vivid.noint <- lmer(rating_will ~ condition + rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != 'Neutral'), REML = F)
# main effect
model.vivid.null <- lmer(rating_will ~ condition + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != 'Neutral'), REML = F)
anova(model.vivid.noint, model.vivid.null)
# is there an interaction?
model.vivid <- lmer(rating_will ~ condition * rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != 'Neutral'), REML = F)
anova(model.vivid, model.vivid.noint)
model.vivid <- lmer(rating_will ~ condition * rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != ''), REML = F)
model.vivid.noint <- lmer(rating_will ~ condition + rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != ''), REML = F)
anova(model.vivid, model.vivid.noint)
# main effect
model.vivid.null <- lmer(rating_will ~ condition + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition != ''), REML = F)
anova(model.vivid.noint, model.vivid.null)
# test for effect of condition
model.onaffect.cond <- lmer(rating_happy ~ condition + (1 | subject) + (1 + condition | story_id), data = data, REML = F)
model.onaffect.cond.null <- lmer(rating_happy ~ 1 + (1 | subject) + (1 + condition | story_id), data = data, REML = F)
anova(model.onaffect.cond, model.onaffect.cond.null)
# test for interaction on affect
model.onaffect <- lmer(rating_happy ~ condition * imagine + (1 | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
model.onaffect.noint <- lmer(rating_happy ~ condition + imagine + (1 | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
anova(model.onaffect, model.onaffect.noint)
ggplot(data %>% filter(imagine == 'Imagine'), aes(x = rating_vivid, y = rating_will)) +
geom_point(alpha = 0, aes(color = condition)) + geom_smooth(method = "lm", se = T, aes(color = condition)) +
labs(x = "Vividness of simulation", y = "Likelihood of performing behavior") +
guides(colour = guide_legend(title = 'Condition')) +
scale_colour_manual(labels = c("Justified", "Unjustified"), values = c("Darkgreen", "Red")) +
ylim(1, 7)
ggplot(data %>% filter(imagine == 'Imagine'), aes(x = rating_vivid, y = rating_will)) +
geom_point(alpha = 0, aes(color = condition)) + geom_smooth(method = "lm", se = T, aes(color = condition)) +
labs(x = "Vividness of simulation", y = "Likelihood of performing behavior") +
guides(colour = guide_legend(title = 'Condition')) +
scale_colour_manual(labels = c("Justified", "Unjustified"), values = c("Darkgreen", "Red")) +
ylim(1, 7)
## how does vividness relate to willingness?
ggplot(data %>% filter(imagine == 'Imagine'), aes(x = rating_vivid, y = rating_will)) +
geom_point(alpha = 0, aes(color = condition)) + geom_smooth(method = "lm", se = T, aes(color = condition)) +
labs(x = "Vividness of simulation", y = "Likelihood of performing behavior") +
guides(colour = guide_legend(title = 'Condition')) +
scale_colour_manual(labels = c("Justified", "Neutral", "Unjustified"), values = c("Darkgreen", "Red")) +
ylim(1, 7)
## how does vividness relate to willingness?
ggplot(data %>% filter(imagine == 'Imagine'), aes(x = rating_vivid, y = rating_will)) +
geom_point(alpha = 0, aes(color = condition)) + geom_smooth(method = "lm", se = T, aes(color = condition)) +
labs(x = "Vividness of simulation", y = "Likelihood of performing behavior") +
guides(colour = guide_legend(title = 'Condition')) +
scale_colour_manual(labels = c("Justified", "Neutral", "Unjustified"), values = c("Darkgreen", "Blue", "Red")) +
ylim(1, 7)
# is there an interaction?
model.vivid <- lmer(rating_will ~ condition * rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
model.vivid.noint <- lmer(rating_will ~ condition + rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
anova(model.vivid, model.vivid.noint)
# main effect
model.vivid.null <- lmer(rating_will ~ condition + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
anova(model.vivid.noint, model.vivid.null)
# simple effect
model.vivid.pos <- lmer(rating_will ~ rating_vivid + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Positive'), REML = F)
model.vivid.pos.null <- lmer(rating_will ~  1 + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Positive'), REML = F)
anova(model.vivid.pos, model.vivid.pos.null)
model.vivid.neg <- lmer(rating_will ~ rating_vivid + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Negative'), REML = F)
model.vivid.neg.null <- lmer(rating_will ~  1 + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Negative'), REML = F)
anova(model.vivid.neg, model.vivid.neg.null)
# import data -------------------------------------------------------------
study = studies[4]
data <- read.csv("data.csv") %>% arrange(subject) %>%
filter(version %in% study) %>%
mutate(imagine = factor(imagine, labels = c("Control", "Imagine"), levels = c(0,1)),
condition = factor(condition, labels = c("Positive","Neutral","Negative"), levels = c(2,1,0)),
rating_vivid = (rating_detail + rating_cohere) / 2)
data = data %>%
filter(!(subject %in% getExcludeSubj(data, 50,
ifelse(study == 'scrambled',
length(unique(story_id)) / 2,
length(unique(story_id))))))
if (study != 'rhyme') {
data = data %>% filter(condition != 'Neutral')
}
df.bysubj <- data %>% group_by(condition, imagine, subject) %>%
summarise(rating_will = mean(rating_will), rating_happy = mean(rating_happy),
rating_check = mean(rating_check), rating_justif = mean(rating_justif),
rating_vivid = mean(rating_vivid))
df.bycond <- df.bysubj %>% group_by(condition, imagine) %>%
summarise(will = mean(rating_will), will.se = se(rating_will),
happy = mean(rating_happy), happy.se = se(rating_happy),
check = mean(rating_check), check.se = se(rating_check),
justif = mean(rating_justif), justif.se = se(rating_justif),
vivid = mean(rating_vivid), vivid.se = se(rating_vivid))
ggplot(df.bycond, aes(x = imagine, y = will, colour = condition, group = condition)) +
geom_line(aes(), size = 1) +
geom_point(aes(), size = 5) +
geom_errorbar(aes(ymax = will + will.se, ymin = will - will.se), width = .1) +
labs(x = "", y = "Likelihood of performing behavior") +
theme(axis.title.y = element_text(vjust = 1)) +
guides(linetype = guide_legend(title = "Condition"),
colour = guide_legend(title = "Condition"),
shape = guide_legend(title = "Condition")) +
ylim(2, 7) +
scale_colour_manual(labels = c("Justified", "Neutral", "Unjustified"), values = c("Darkgreen", "Blue", "Red"))
# is there an interaction?
model.vivid <- lmer(rating_will ~ condition * rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
model.vivid.noint <- lmer(rating_will ~ condition + rating_vivid + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
anova(model.vivid, model.vivid.noint)
# main effect
model.vivid.null <- lmer(rating_will ~ condition + (1 + rating_vivid | subject) + (1 + condition * rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine'), REML = F)
anova(model.vivid.noint, model.vivid.null)
# simple effect
model.vivid.pos <- lmer(rating_will ~ rating_vivid + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Positive'), REML = F)
model.vivid.pos.null <- lmer(rating_will ~  1 + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Positive'), REML = F)
anova(model.vivid.pos, model.vivid.pos.null)
model.vivid.neg <- lmer(rating_will ~ rating_vivid + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Negative'), REML = F)
model.vivid.neg.null <- lmer(rating_will ~  1 + (1 + rating_vivid | subject) + (1 + rating_vivid | story_id),
data = data %>% filter(imagine == 'Imagine', condition == 'Negative'), REML = F)
anova(model.vivid.neg, model.vivid.neg.null)
## how does vividness relate to willingness?
ggplot(data %>% filter(imagine == 'Imagine'), aes(x = rating_vivid, y = rating_will)) +
geom_point(alpha = 0, aes(color = condition)) + geom_smooth(method = "lm", se = T, aes(color = condition)) +
labs(x = "Vividness of simulation", y = "Likelihood of performing behavior") +
guides(colour = guide_legend(title = 'Condition')) +
scale_colour_manual(labels = c("Justified", "Unjustified"), values = c("Darkgreen", "Red")) +
ylim(1, 7)
# test for effect of condition
model.onaffect.cond <- lmer(rating_happy ~ condition + (1 | subject) + (1 + condition | story_id), data = data, REML = F)
model.onaffect.cond.null <- lmer(rating_happy ~ 1 + (1 | subject) + (1 + condition | story_id), data = data, REML = F)
anova(model.onaffect.cond, model.onaffect.cond.null)
# test for interaction on affect
model.onaffect <- lmer(rating_happy ~ condition * imagine + (1 | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
model.onaffect.noint <- lmer(rating_happy ~ condition + imagine + (1 | subject) + (1 + condition * imagine | story_id), data = data, REML = F)
anova(model.onaffect, model.onaffect.noint)
detach(package:lmerTest, unload=T)
data.pos = data %>% filter(condition == 'Positive') %>% mutate(imagine.numeric = as.numeric(imagine))
model.med1 = lmer(rating_happy ~ imagine + (1 + imagine.numeric | subject), data = data.pos)
model.med2 = lmer(rating_will ~ imagine + rating_happy + (1 + imagine.numeric + rating_happy | subject), data = data.pos)
model.med3 = mediate(model.med1, model.med2, treat = 'imagine', mediator = 'rating_happy')
summary(model.med3)
plot(model.med3)
require(lmerTest)
# plot willingness vs affect, split by all
ggplot(data, aes(x = rating_happy, y = rating_will)) +
geom_jitter() +
geom_smooth(method = lm) +
labs(x = "How the story made you feel", y = "Willingness") +
theme(axis.title.y = element_text(vjust = 1)) +
facet_wrap(~ imagine + condition)
detach(package:lmerTest, unload=T)
data.pos = data %>% filter(imagine == 'Imagine') %>% mutate(imagine.numeric = as.numeric(condition))
model.med1 = lmer(rating_happy ~ condition + (1 + imagine.numeric | subject), data = data.pos)
model.med2 = lmer(rating_will ~ condition + rating_happy + (1 + imagine.numeric + rating_happy | subject), data = data.pos)
model.med3 = mediate(model.med1, model.med2, treat = 'imagine', mediator = 'rating_happy')
summary(model.med3)
plot(model.med3)
require(lmerTest)
detach(package:lmerTest, unload=T)
data.pos = data %>% filter(imagine == 'Imagine') %>% mutate(imagine.numeric = as.numeric(condition))
model.med1 = lmer(rating_happy ~ condition + (1 + imagine.numeric | subject), data = data.pos)
model.med2 = lmer(rating_will ~ condition + rating_happy + (1 + imagine.numeric + rating_happy | subject), data = data.pos)
model.med3 = mediate(model.med1, model.med2, treat = 'condition', mediator = 'rating_happy')
summary(model.med3)
plot(model.med3)
rm(list=ls())
